// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image           UserImage?
  password        Password?
  notes           Note[]
  roles           Role[]
  sessions        Session[]
  connections     Connection[]
  userSubchapters UserSubChapter[]
  userLessons     UserLesson[]
  userQuizzes     UserQuiz[]
  userAnswers     UserQuizAnswer[]
  userSubjects    UserSubject[]
  userChapters    UserChapter[]

  @@map("user")
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
  @@map("note")
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@map("user_image")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  @@map("password")
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
  @@map("session")
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
  @@map("permission")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]

  @@map("role")
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
  @@map("verification")
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
  @@map("connection")
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapters     Chapter[]
  userSubjects UserSubject[]
  image        SubjectImage?

  @@map("subject")
}

model SubjectImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId Int     @unique

  // non-unique foreign key
  @@index([subjectId])
  @@map("subject_image")
}

model Chapter {
  id              Int     @id @default(autoincrement())
  name            String
  nextChapterId   Int?    @unique()
  imageDone       String?
  imageLocked     String?
  imageInProgress String?
  subjectId       Int
  chapterOrder    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject      Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subChapters  SubChapter[]
  userChapters UserChapter[]
  image        ChapterImage?

  @@map("chapter")
}

model ChapterImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapterId Int     @unique

  // non-unique foreign key
  @@index([chapterId])
  @@map("chapter_image")
}

model SubChapter {
  id               Int     @id @default(autoincrement())
  name             String
  nextSubchapterId Int?    @unique()
  chapterId        Int?
  width            Int     @default(200)
  height           Int     @default(200)
  spacing          Float   @default(1.5)
  nonSiblings      Float   @default(1.5)
  zoom             Float   @default(0.5)
  depth            Int     @default(750)
  displayId        String?
  order            Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessons         Lesson[]
  chapter         Chapter?         @relation(fields: [chapterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quizzes         Quiz[]
  userSubchapters UserSubChapter[]
  image           SubChapterImage?

  @@map("subchapter")
}

model SubChapterImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subChapter   SubChapter @relation(fields: [subChapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subChapterId Int        @unique

  // non-unique foreign key
  @@index([subChapterId])
  @@map("subchapter_image")
}

model Lesson {
  id             Int     @id @default(autoincrement())
  name           String
  subchapterId   Int
  parentLessonId Int?
  isParent       Boolean @default(false)
  studySessionId Int?
  description    String?
  noPopup        Boolean @default(false)
  width          Int?    @default(200)
  height         Int?    @default(200)
  spacing        Float?  @default(1.5)
  nonSiblings    Float?  @default(1.5)
  zoom           Float?  @default(0.5)
  depth          Int?    @default(750)
  displayId      String?
  order          Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentLesson Lesson?      @relation("lessonTolesson", fields: [parentLessonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childLessons Lesson[]     @relation("lessonTolesson")
  subChapter   SubChapter   @relation(fields: [subchapterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userLessons  UserLesson[]
  image        LessonImage?

  @@map("lesson")
}

model LessonImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId Int     @unique

  // non-unique foreign key
  @@index([lessonId])
  @@map("lesson_image")
}

model Quiz {
  id           Int            @id @default(autoincrement())
  name         String
  subchapterId Int
  order        Int?
  questions    QuizQuestion[]
  subchapter   SubChapter     @relation(fields: [subchapterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userQuiz     UserQuiz[]

  @@map("quiz")
}

model QuizQuestion {
  id     Int    @id @default(autoincrement())
  name   String
  testId Int
  order  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers QuizAnswer[]
  quiz    Quiz         @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("quiz_question")
}

model QuizAnswer {
  id         Int      @id @default(autoincrement())
  title      String
  isCorrect  Boolean? @default(false)
  questionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question    QuizQuestion     @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAnswers UserQuizAnswer[]

  @@map("quiz_answer")
}

model UserSubject {
  userId    String
  subjectId Int
  status    String @default("LOCKED")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([subjectId, userId])
  @@index([userId])
  @@index([subjectId])
  @@map("user_subject")
}

model UserChapter {
  userId    String
  chapterId Int
  state     String @default("LOCKED")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([chapterId, userId])
  @@index([userId])
  @@index([chapterId])
  @@map("user_chapter")
}

model UserSubChapter {
  userId       String
  subchapterId Int
  state        String @default("LOCKED")
  chapterId    Int?
  score        Float?

  subchapter SubChapter @relation(fields: [subchapterId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, subchapterId])
  @@unique([subchapterId, userId])
  @@map("user_subchapter")
}

model UserLesson {
  lessonId Int
  userId   String
  state    String @default("LOCKED")

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([lessonId, userId])
  @@index([userId])
  @@index([lessonId])
  @@map("user_lesson")
}

model UserQuiz {
  userId String
  quizId Int
  score  Float?

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, quizId])
  @@index([userId])
  @@index([quizId])
  @@map("user_quiz")
}

model UserQuizAnswer {
  userId   String
  answerId Int

  answer QuizAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, answerId])
  @@index([answerId])
  @@index([userId])
  @@map("user_quiz_answer")
}
